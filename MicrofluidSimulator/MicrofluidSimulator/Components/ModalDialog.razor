@* Adapted from https://www.puresourcecode.com/dotnet/blazor/modal-dialog-component-for-blazor/ *@

@inject IJSRuntime JsRuntime
@using MicrofluidSimulator.SimulatorCode
@using MicrofluidSimulator.SimulatorCode.View
@using System.Dynamic



<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="btn-close" @onclick="ModalCancel"></button>
            </div>
            <div class="modal-body">
                @*<p>@Text</p>*@
                @if(kvpList.Count != 0)
                {
                    @foreach (var item in kvpList)
                    {
                        // elementType is not a real attribute
                        if(item.Key == "elementType") { continue; }
                        <div> 
                            @item.Key
                            <input value=@item.Value>
                        </div>
                    }
                } else
                {
                    <p>Please select a valid element!</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=@ModalSubmit>Submit</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    [Parameter]
    public EventCallback<bool> OnOpen { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public List<KeyValuePair<string, string>> Information { get; set;  }

    //String Title = "Information editor";
    //String Text = "HEJHEJ";

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalSubmit()
    {
        return OnSubmit.InvokeAsync(false);
    }



    private List<KeyValuePair<string, string>> kvpList = new List<KeyValuePair<string, string>>() { };
    protected override async void OnInitialized()
    {
        GUIBroker guibroker = new GUIBroker(JsRuntime);

        string jsonString = guibroker.get_selected_element();


        try
        {
            // JSON deserialization of Electrode
            Electrode el = Newtonsoft.Json.JsonConvert.DeserializeObject<Electrode>(jsonString);
            Console.WriteLine(jsonString);
            kvpList.Insert(0, new KeyValuePair<string, string>("elementType", "Electrode"));

            // Go through every property in the Electrode
            foreach (var property in el.GetType().GetProperties())
            {

                //Console.Write(property.Name + ": ");

                // Check if the type of the property value is a ArrayList or Int32[,]
                if(property.GetValue(el, null).GetType().Equals(typeof(System.Collections.ArrayList)) 
                || property.GetValue(el, null).GetType().Equals(typeof(System.Int32[,])))
                {
                    //Console.Write(Newtonsoft.Json.JsonConvert.SerializeObject(property.GetValue(el, null)));
                    kvpList.Insert(0, new KeyValuePair<string, string>(property.Name, Newtonsoft.Json.JsonConvert.SerializeObject(property.GetValue(el, null))));
                } else
                {
                    //Console.Write(property.GetValue(el, null));
                    kvpList.Insert(0, new KeyValuePair<string, string>(property.Name, property.GetValue(el, null).ToString()));
                }



            }

            foreach (KeyValuePair<string, string> kvp in kvpList)
            {
                Console.WriteLine(string.Format("Key: {0} Value: {1}", kvp.Key, kvp.Value));
            }

        } catch (Exception e)
        {
            Console.WriteLine(e.Source);
            kvpList = new List<KeyValuePair<string, string>>() { };
        }

        StateHasChanged();
    }

    public KeyValuePair<string, Dictionary<string, string>> getElementOnSumbit()
    {
        if(kvpList.Count == 0) { return new KeyValuePair<string, Dictionary<string, string>>("", null); }



        //Newtonsoft.Json.JsonConvert.DeserializeObject<Electrodes>(jsonString);

        var dict = kvpList.ToDictionary(x => x.Key, x => x.Value);

        foreach (var item in dict)
        {
            Console.WriteLine(item);
        }


        string element = dict["elementType"];
        dict.Remove("elementType");



        /*foreach (var item in kvpList)
        {
            if(item.Key == "elementType") { element = item.Value; }
            elementObj[item.Key] = item.Value;
        }*/

        return new KeyValuePair<string, Dictionary<string, string>>(element, dict);

    }

    public async void ModalOpen()
    {
        
    }
}