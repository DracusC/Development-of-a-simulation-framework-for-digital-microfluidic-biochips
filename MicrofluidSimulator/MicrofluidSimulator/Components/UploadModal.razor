@* Adapted from https://www.puresourcecode.com/dotnet/blazor/modal-dialog-component-for-blazor/ *@

@using MicrofluidSimulator.SimulatorCode
@using MicrofluidSimulator.SimulatorCode.View
@using System.Dynamic
@using System.Text



<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Data Download</h4>
                <button type="button" class="btn-close" @onclick="ModalCancel"></button>
            </div>
            <div class="modal-body">
                <p>Upload a protocol to be run on the simulator framework.</p>
                <InputFile OnChange="@LoadFiles" multiple />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=@ModalSubmit>Submit</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    [Parameter]
    public EventCallback<bool> OnOpen { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Text { get; set; }

    public string File1 { get; set; }

    //public File UploadFile;

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        string path = "./uploaded_file.txt";
        Console.WriteLine(e.File.Name);

        await using FileStream fs = new(path, FileMode.Create, FileAccess.ReadWrite);
        await e.File.OpenReadStream().CopyToAsync(fs);
        fs.Close();

        //Console.WriteLine(fs.Name);


        /*StreamReader inFileStream = new StreamReader(fs);
        string line;
        uint lineNumber = 1;
        while ((line = inFileStream.ReadLine()) != null)
        {
            Console.WriteLine(line);
            lineNumber++;
        }

        Console.WriteLine(fs.Length);*/
        Console.WriteLine("Done");
    }

    private void OnFileChange(EventArgs Event)
    {
        Console.WriteLine(Event);
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalSubmit()
    {
        return OnSubmit.InvokeAsync(false);
    }

    public async void ModalOpen()
    {

    }
}