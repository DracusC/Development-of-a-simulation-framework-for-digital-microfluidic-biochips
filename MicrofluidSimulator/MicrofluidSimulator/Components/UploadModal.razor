@* Adapted from https://www.puresourcecode.com/dotnet/blazor/modal-dialog-component-for-blazor/ *@

@using MicrofluidSimulator.SimulatorCode
@using MicrofluidSimulator.SimulatorCode.View
@using System.Dynamic
@using System.Text


<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);"
     aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Upload</h4>
                <button type="button" class="btn-close" @onclick="ModalCancel"></button>
            </div>
            <div class="modal-body">
                <p>Upload configuration file (json):</p>
                <InputFile name="Configuration" OnChange="@LoadConfiguration" accept=".json"/>
                <p>Upload protocol file (basm):</p>
                <InputFile name="Protocol" OnChange="@LoadProtocol" accept=".basm"/>
            </div>
            <div class="modal-footer">
                @if(!submitted) {
                    <button type="button" class="btn btn-primary" @onclick=@Submit>Submit</button>
                } else
                {
                    <p>Loading simulation...</p>
                }
            </div>

        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    [Parameter]
    public EventCallback<bool> OnOpen { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Text { get; set; }

    public string File1 { get; set; }

    private bool configurationUploaded { get; set; }
    private bool protocolUploaded { get; set; }
    private bool submitted { get; set; } = false;

    private async void LoadConfiguration(InputFileChangeEventArgs e)
    {
        Console.WriteLine(e.File);
        string path = "./uploaded_configuration_file.json";

        await using FileStream fs = new(path, FileMode.Create, FileAccess.ReadWrite);
        await e.File.OpenReadStream().CopyToAsync(fs);
        fs.Close();
    }

    private async void LoadProtocol(InputFileChangeEventArgs e)
    {
        string path = "./uploaded_file.basm";

        await using FileStream fs = new(path, FileMode.Create, FileAccess.ReadWrite);
        await e.File.OpenReadStream().CopyToAsync(fs);
        fs.Close();
    }

    private void OnFileChange(EventArgs Event)
    {
        Console.WriteLine(Event);
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private async void Submit()
    {
        submitted = true;
        StateHasChanged();
        await Task.Delay(100);
        ModalSubmit();
    }

    private Task ModalSubmit()
    {
        return OnSubmit.InvokeAsync(false);
    }

    public async void ModalOpen()
    {

    }
}