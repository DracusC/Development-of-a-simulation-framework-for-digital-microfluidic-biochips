@page "/"
@page "/JoelsPage"
@using MicrofluidSimulator.Components
@using MicrofluidSimulator.SimulatorCode.DataTypes
@using Microsoft.JSInterop
@using SimulatorCode
@using System.Text.Json.Serialization
@using MicrofluidSimulator.SimulatorCode.Simulator
@inject IJSInProcessRuntime JSInProcessRuntime
@inject IJSUnmarshalledRuntime JSUnmarshalledRuntime
@inject HttpClient Http
@using MicrofluidSimulator.SimulatorCode.DataTypes
@using MicrofluidSimulator.SimulatorCode.View
@using System.Diagnostics
@using System.Text.Json
@using System.Reflection

<h3>Welcome to the simulator</h3>

<div id="simulatorGUI">
    <div id="simulatorContainer">
        <div id="mainContent">

            <div id="simulatorView">
                <span>BOARD NAME</span>
                <div id='container'></div>
            </div>

            <div id="layerPanel">
                <span>Layer Panel</span>
                <form name="layer">

                </form>
            </div>
        </div>

        <div id="informationPanelContainer">
            <div id="informationPanel">
                <div id="informationTitle">
                    <span>Information Panel</span>
                    <div class="customtooltip">
                        <img src="assets/edit_icon.png" />
                        <span class="customtooltiptext">Edit information</span>
                    </div>
                </div>

                <div id="information">
                    <button id="edit_button" class="btn btn-primary">Edit</button>
                    <div id="saveclose_button_div"><button id="save_button" class="btn btn-primary">Save</button><button id="cancel_button" class="btn btn-primary">Cancel</button></div>
                    <div id="informationElements"></div>
                </div>
            </div>

            <div id="">
                <span>Selection Panel</span>
                <div id="selectionPanel">

                </div>
            </div>
        </div>


        <button id="nextStep" class="btn btn-primary" @onclick="JSSimulatorNextStep">Next Step</button>
        <button class="btn btn-primary" @onclick="Play">@PlayButtonText</button>
        <button class="btn btn-primary" @onclick="Restart">Restart</button>
    </div>
</div>



<RadzenSlider TValue="int" Min="-100" Max="100"></RadzenSlider>

@functions{
    void setP5() {
        JSInProcessRuntime.Invoke<object>("setp5");
    }
 }

@code {
    // ACTUAL CODE BELOW
    static GUIBroker guibroker = new GUIBroker();

    bool test = true;
    Stopwatch stopwatch = new Stopwatch();

    private void NextStep() {
        //if(test) { stopwatch.Start(); test = false; } else {stopwatch.Stop(); Console.WriteLine("SW: " + stopwatch.ElapsedMilliseconds); stopwatch.Reset(); test = true; }
        simulator.simulatorStep(-1);
        guibroker.update_board(simulator.container);
    }

    public string PlayButtonText { get; set; } = "Play";
    public void Play() {
        Console.WriteLine("Play called");

        PlayButtonText = PlayButtonText.Equals("Play") ? "Pause" : "Play";

        InvokeAsync(() => StateHasChanged());


        guibroker.change_play_status();
    }

    [JSInvokable]
    public static void JSSimulatorNextStep() {
        guibroker.start_update_timer();

        simulator.simulatorStep(-1f);
        guibroker.update_board(simulator.container);
    }
    [JSInvokable]
    public static void nextStepTime(float deltaTime)
    {
        simulator.simulatorStep(deltaTime);
        guibroker.update_board(simulator.container);
    }

    public void Restart()
    {
        simulator.restartSimulator();
        guibroker.update_board(simulator.container);
    }

    [JSInvokable]
    public static void updateSimulatorContainer(string Type, string JSONString)
    {
        // [(key -> value)] [ID1 -> 1, "Status" -> 1]
        Console.WriteLine(Type);
        Console.WriteLine(JSONString);

        int ID;
        int index;

        switch (Type)
        {
            case ("Electrode"):
                Electrode JSONElectrode = Newtonsoft.Json.JsonConvert.DeserializeObject<Electrode>(JSONString);

                ID = JSONElectrode.ID;
                index = MicrofluidSimulator.SimulatorCode.Models.HelpfullRetreiveFunctions.getIndexOfElectrodeByID(ID, simulator.container);

                Electrode electrode = simulator.container.electrodes[index];

                electrode.status = JSONElectrode.status;
                break;

            case ("Droplet"):
                MicrofluidSimulator.SimulatorCode.Droplets JSONDroplet = Newtonsoft.Json.JsonConvert.DeserializeObject<MicrofluidSimulator.SimulatorCode.Droplets>(JSONString);
                ID = JSONDroplet.ID;
                index = MicrofluidSimulator.SimulatorCode.Models.HelpfullRetreiveFunctions.getIndexOfDropletByID(ID, simulator.container);

                Console.WriteLine("ID: " + ID + ", index: " + index);

                MicrofluidSimulator.SimulatorCode.Droplets droplet = (MicrofluidSimulator.SimulatorCode.Droplets)simulator.container.droplets[index];

                droplet.color = JSONDroplet.color;
                droplet.temperature = JSONDroplet.temperature;
                droplet.volume = JSONDroplet.volume;
                break;

            case ("Group"):

                break;
        }

        simulator.simulatorRunAllModels();
        guibroker.update_board(simulator.container);
    }

    private Container? container;
    private static Simulator? simulator;
    private MicrofluidSimulator.SimulatorCode.DataTypes.ElectrodesWithNeighbours[]? electrodesWithNeighbours;
    protected override async void OnAfterRender(bool firstRender) {
        Console.WriteLine("FIRST == " + firstRender);
        if (firstRender) {
            Console.WriteLine("TEST");

            setP5();
            container = await Http.GetFromJsonAsync<Container>("sample-data/platform640v2.json");
            electrodesWithNeighbours = await Http.GetFromJsonAsync<MicrofluidSimulator.SimulatorCode.DataTypes.ElectrodesWithNeighbours[]>("sample-data/platform640v2neighbours.json");
            string actionQueueInstructions = await Http.GetStringAsync("sample-data/simple_paths_commands.txt");
            Console.WriteLine("CONTAINER HERE" + container);
            simulator = new Simulator(null, container, electrodesWithNeighbours, actionQueueInstructions);
            Console.WriteLine("SIMULATOR.CONTAINER HERE" + simulator.container);
            guibroker.set_jsprocess(JSInProcessRuntime);
            guibroker.set_unmarshall(JSUnmarshalledRuntime);
            guibroker.start_update_timer();
            guibroker.update_board(simulator.container);
            guibroker.initialize_board(container.information);
        }
    }
}