@page "/JoelsPage"
@using Microsoft.JSInterop
@using SimulatorCode
@using System.Text.Json.Serialization
@using MicrofluidSimulator.SimulatorCode.Simulator
@inject IJSRuntime JsRuntime
@using MicrofluidSimulator.SimulatorCode.View


<h3>Welcome to the simulator</h3>

<div id='container'></div>

<button class="btn btn-primary" @onclick="NextStep">Next Step</button>
<button class="btn btn-primary" @onclick="Play">Play</button>

@functions{
    async void setP5() {
        await JsRuntime.InvokeAsync<object>("setp5");
    }
}

@code {
    Simulator simulator = new Simulator(null);
    GUIBroker guibroker = new GUIBroker();

    private void NextStep() {
        //currentCount++;
        simulator.simulatorStep();
        guibroker.update_board(simulator.Container);
    }

    [JSInvokable]
    public static void Play() {
        Console.WriteLine("Play called");
    }


    private static Func<Task> CallPlaceHolder;

    private async Task RunNextSimulatorStep()
    {
        if (simulator.ActionQueue.Count != 0)
        {
            Console.WriteLine(simulator.ActionQueue.Count);
            NextStep();
        }
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        CallPlaceHolder = RunNextSimulatorStep;
    }
    [JSInvokable]
    public static async Task JSSimulatorNextStep()
    {
        await CallPlaceHolder.Invoke();
    }


    protected override async void OnAfterRender(bool firstRender) {
        if(firstRender) {
            setP5();

            guibroker.set_jsruntime(JsRuntime);
            guibroker.update_board(simulator.Container);
        }
    }
}