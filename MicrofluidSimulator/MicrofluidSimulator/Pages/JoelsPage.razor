@page "/"
@page "/JoelsPage"
@using MicrofluidSimulator.Components
@using MicrofluidSimulator.SimulatorCode.DataTypes
@using Microsoft.JSInterop
@using SimulatorCode
@using System.Text.Json.Serialization
@using MicrofluidSimulator.SimulatorCode.Simulator
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@using MicrofluidSimulator.SimulatorCode.DataTypes.JsonDataTypes
@using MicrofluidSimulator.SimulatorCode.View
@using System.Diagnostics
@using System.Text.Json
@using System.Reflection

@if(ModalOpen){
    <ModalDialog  @ref=editorModal Title="Information editor" Text = "INSERT" OnClose="@CloseModal" OnSubmit="@SubmitModal"/>
}

<h3>Welcome to the simulator</h3>

<div id="simulatorGUI">
    <div id="simulatorContainer">
        <div id="mainContent">

            <div id="simulatorView">
                <span>BOARD NAME</span>
                <div id='container'></div>
            </div>
            
            <div id="layerPanel">
                <span>Layer Panel</span>
                <form name="layer">
                    
                </form>
            </div>
        </div>

        <div id="informationPanelContainer">
            <div id="informationPanel">
                <div id="informationTitle">
                    <span>Information Panel</span>
                    <div class="customtooltip">
                        <img src="assets/edit_icon.png" />
                        <span class="customtooltiptext">Edit information</span>
                    </div>
                </div>
                
                <div id="information">
                    <button id="edit_button" class="btn btn-primary">Edit</button>
                    <div id="saveclose_button_div"><button id="save_button" class="btn btn-primary">Save</button><button id="cancel_button" class="btn btn-primary">Cancel</button></div>
                    <div id="informationElements"></div>
                </div>
            </div>

            <div id="">
                <span>Selection Panel</span>
                <div id="selectionPanel">

                </div>
            </div>
        </div>


        <button id="nextStep" class="btn btn-primary" @onclick="JSSimulatorNextStep">Next Step</button>
        <button class="btn btn-primary" @onclick="Play">@PlayButtonText</button>
    </div>
</div>



<RadzenSlider TValue="int" Min="-100" Max="100"></RadzenSlider>

<button class="btn btn-primary" @onclick="OpenModal">MODAL</button>

@functions{
    async void setP5() {
        await JsRuntime.InvokeAsync<object>("setp5");
    }
}

@code {

    // ACTUAL CODE BELOW
    static GUIBroker guibroker = new GUIBroker();

    bool test = true;
    Stopwatch stopwatch = new Stopwatch();


    public string PlayButtonText { get; set; } = "Play";
    public void Play() {
        Console.WriteLine("Play called");

        PlayButtonText = PlayButtonText.Equals("Play") ? "Pause" : "Play";
        
        InvokeAsync(() => StateHasChanged());

        
        guibroker.change_play_status();
    }

    [JSInvokable]
    public static async Task JSSimulatorNextStep() {
        simulator.simulatorStep(-1f);
        guibroker.update_board(simulator.Container);
    }
    [JSInvokable]
    public static void nextStepTime(float deltaTime)
    {
        simulator.simulatorStep(deltaTime);
        guibroker.update_board(simulator.Container);
    }
    [JSInvokable]
    public static async void updateSimulatorContainer(string Type, string JSONString)
    {
        // [(key -> value)] [ID1 -> 1, "Status" -> 1]
        Console.WriteLine(Type);
        Console.WriteLine(JSONString);


        switch(Type)
        {
            case("Electrode"):


                MicrofluidSimulator.SimulatorCode.DataTypes.JsonDataTypes.Electrode JSONElectrode = JsonSerializer.Deserialize<MicrofluidSimulator.SimulatorCode.DataTypes.JsonDataTypes.Electrode>(JSONString);

                int ID = JSONElectrode.ID;
                Console.WriteLine("ID: " + ID);
                int index =  MicrofluidSimulator.SimulatorCode.Models.HelpfullRetreiveFunctions.getIndexOfElectrodeByID(ID, simulator.Container);
                Console.WriteLine("Index: " + index);


                Electrodes electrode = simulator.Container.Electrodes[index];

                Console.WriteLine(JSONElectrode.GetType().GetProperties().Length);

                foreach (PropertyInfo property in JSONElectrode.GetType().GetProperties())
                {   
                    Console.WriteLine(property.Name + " : " + electrode.GetType().GetProperty(property.Name));
                    
                }

                
                //MicrofluidSimulator.SimulatorCode.DataTypes.JsonDataTypes.Electrode electrode = JsonSerializer.Deserialize<MicrofluidSimulator.SimulatorCode.DataTypes.JsonDataTypes.Electrode>(JSONString);

                //electrode.GetType().GetProperty(key) = value;

                break;
        }
    }


    private JsonContainer? container;
    private static Simulator? simulator;
    private MicrofluidSimulator.SimulatorCode.DataTypes.ElectrodesWithNeighbours[]? electrodesWithNeighbours;
    protected override async void OnAfterRender(bool firstRender) {
        Console.WriteLine("FIRST == " + firstRender);
        if(firstRender) {
            Console.WriteLine("TEST");
            setP5();
            container = await Http.GetFromJsonAsync<JsonContainer>("sample-data/platform640v2.json");
            electrodesWithNeighbours = await Http.GetFromJsonAsync<MicrofluidSimulator.SimulatorCode.DataTypes.ElectrodesWithNeighbours[]>("sample-data/platform640v2neighbours.json");
            string actionQueueInstructions = await Http.GetStringAsync("sample-data/simple_paths_commands.txt");
            simulator = new Simulator(null, container, electrodesWithNeighbours, actionQueueInstructions);

            guibroker.set_jsruntime(JsRuntime);
            guibroker.update_board(simulator.Container);
            guibroker.initialize_board(container.information);
        }
    }
    

    // MODAL CODE
    ModalDialog editorModal;
    public bool ModalOpen { get; set; }
    private async Task CloseModal(bool accepted)
    {
        ModalOpen = false;
        StateHasChanged();
    }
    private async void OpenModal()
    {
        ModalOpen = true;
        StateHasChanged();
    }
    private async Task SubmitModal(bool accepted)
    {
        KeyValuePair<string, Dictionary<string, string>> result = editorModal.getElementOnSumbit();

        string jsonString = Newtonsoft.Json.JsonConvert.SerializeObject(result.Value);
        Console.WriteLine(jsonString);
        Electrodes el = Newtonsoft.Json.JsonConvert.DeserializeObject<Electrodes>(jsonString);

        foreach (var property in el.GetType().GetProperties())
            {
                Console.WriteLine(property.Name + ": " + property.GetValue(el, null));
            }

        ModalOpen = false;
        StateHasChanged();
    }

}