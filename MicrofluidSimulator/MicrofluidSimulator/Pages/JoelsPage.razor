@page "/JoelsPage"
@using Microsoft.JSInterop
@using SimulatorCode
@using System.Text.Json.Serialization
@using MicrofluidSimulator.SimulatorCode.Simulator
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@using MicrofluidSimulator.SimulatorCode.DataTypes
@using MicrofluidSimulator.SimulatorCode.View
@using System.Diagnostics


<h3>Welcome to the simulator</h3>

<div id='container'></div>

<button class="btn btn-primary" @onclick="NextStep">Next Step</button>
<button class="btn btn-primary" @onclick="Play">Play</button>

@functions{
    async void setP5() {
        await JsRuntime.InvokeAsync<object>("setp5");
    }
}

@code {
    GUIBroker guibroker = new GUIBroker();

    bool test = true;
    Stopwatch stopwatch = new Stopwatch();

    private void NextStep() {
        if(test) { stopwatch.Start(); test = false; } else {stopwatch.Stop(); Console.WriteLine("SW: " + stopwatch.ElapsedMilliseconds); stopwatch.Reset(); test = true; }
        simulator.simulatorStep();
        guibroker.update_board(simulator.Container);
    }

    public void Play() {
        Console.WriteLine("Play called");
        guibroker.change_play_status();
    }

    private async Task RunNextSimulatorStep() {
        if (simulator.ActionQueue.Count != 0) {
            Console.WriteLine(simulator.ActionQueue.Count);
            NextStep();
        }
    }

    // Used to call C# code from JS
    private static Func<Task> CallPlaceHolder;
    protected override void OnInitialized() {
        base.OnInitialized();
        CallPlaceHolder = RunNextSimulatorStep;
    }
    [JSInvokable]
    public static async Task JSSimulatorNextStep() {
        await CallPlaceHolder.Invoke();
    }

    private JsonContainer? container;
    private Simulator? simulator;
    protected override async void OnAfterRender(bool firstRender) {
        Console.WriteLine("FIRST == " + firstRender);
        if(firstRender) {
            Console.WriteLine("TEST");
            setP5();
            container = await Http.GetFromJsonAsync<JsonContainer>("sample-data/platform640v1.json");
            simulator = new Simulator(null, container);
            guibroker.set_jsruntime(JsRuntime);
            guibroker.update_board(simulator.Container);
        }
    }
}